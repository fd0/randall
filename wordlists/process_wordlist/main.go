package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"text/template"

	"github.com/spf13/pflag"
)

func die(msg string, args ...interface{}) {
	if !strings.HasSuffix(msg, "\n") {
		msg += "\n"
	}
	fmt.Fprintf(os.Stderr, msg, args...)
	os.Exit(1)
}

// for the format of the "do not edit" string see https://golang.org/s/generatedcode
const listTemplate = `// Code generated by process_wordlist; DO NOT EDIT.

package wordlists

func init() {
Lists[{{ printf "%q" .Name }}] = []string{
{{range .Words }}
{{- printf "%q" . }},
{{end}}
}
}
`

func readFiles(files ...string) (words []string, err error) {
	for _, filename := range files {
		f, err := os.Open(filename)
		if err != nil {
			return nil, err
		}

		sc := bufio.NewScanner(f)
		for sc.Scan() {
			if sc.Err() != nil {
				return nil, sc.Err()
			}

			data := strings.Fields(sc.Text())
			words = append(words, data[len(data)-1])
		}

		err = f.Close()
		if err != nil {
			return nil, err
		}
	}

	return words, nil
}

func main() {
	var opts struct {
		Output string
		Name   string
	}

	flags := pflag.NewFlagSet("process", pflag.ExitOnError)
	flags.StringVar(&opts.Output, "output", "", "write output to `file`")
	flags.StringVar(&opts.Name, "name", "", "set wordlist `name`")

	err := flags.Parse(os.Args)
	if err != nil {
		panic(err)
	}

	if opts.Output == "" {
		die("output file unset, use --output FILE")
	}

	if opts.Name == "" {
		die("name not set, use --name X")
	}

	tmpl, err := template.New("").Parse(listTemplate)
	if err != nil {
		panic(err)
	}

	words, err := readFiles(flags.Args()[1:]...)
	if err != nil {
		panic(err)
	}

	f, err := os.Create(opts.Output)
	if err != nil {
		panic(err)
	}

	err = tmpl.Execute(f, struct {
		Name  string
		Words []string
	}{
		Name:  opts.Name,
		Words: words,
	})
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}
}
